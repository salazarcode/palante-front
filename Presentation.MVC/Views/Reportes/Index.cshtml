@{
    ViewData["Title"] = "Reportes";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

    <div id="app">
        <input type="hidden" id="endpoint" name="endpoint" value="@ViewBag.endpoint" />

        <div class="container">
            <div class="row">
                <div class="col-md-4">

                    <div class="row">
                        <div class="col">
                            <button class="btn btn-sm btn-success btn-sm"
                                    data-toggle="modal"
                                    data-target="#modalReporteEstado"
                                    style="margin-bottom:10px; margin-top:10px; width:100%">
                                Créditos por estado
                            </button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <button class="btn btn-sm btn-warning btn-sm"
                                    data-toggle="modal"
                                    data-target="#modalReporteCreditosDisponibles"
                                    style="margin-bottom:10px; margin-top:10px; width:100%">
                                Créditos Disponibles
                            </button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <button class="btn btn-sm btn-warning btn-sm"
                                    data-toggle="modal"
                                    data-target="#modalReportePendientesAprobacion"
                                    style="margin-bottom:10px; margin-top:10px; width:100%">
                                Créditos Pendientes de Aprobación
                            </button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <button v-if="seleccionados.length != 0"
                                    class="btn btn-sm btn-success btn-sm"
                                    style="margin-bottom:10px;width:100%;margin-top:10px"
                                    @@click="ReporteDeuda">
                                Excel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalReportePendientesAprobacion" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Créditos pendientes de aprobación</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label for="desde">Desde: </label>
                        <input type="date" class="form-control" id="desde" v-model="desde" />

                        <label for="hasta" style="margin-top:15px">Hasta: </label>
                        <input type="date" class="form-control" id="hasta" v-model="hasta" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="button" class="btn btn-primary" @@click="reportePendientesAprobacion">Confirmar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalReporteCreditosDisponibles" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Créditos disponibles</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <label for="desde">Desde: </label>
                        <input type="date" class="form-control" id="desde" v-model="desde" />

                        <label for="hasta" style="margin-top:15px">Hasta: </label>
                        <input type="date" class="form-control" id="hasta" v-model="hasta" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="button" class="btn btn-primary" @@click="reporteCreditosDisponibles">Confirmar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalMensaje" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Mensaje</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>No se encontraron registros en esa selección</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalReporteEstado" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-sm modal-dialog-scrollable" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Créditos por estado</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <h5>Estados:</h5>
                        <ol>
                            <li v-for="e in nestados">
                                <input type="checkbox" :id="'check'+e.valor" :value="e.valor" v-model="estados" />
                                <label :for="'check'+e.valor">{{e.nombre}}</label>
                            </li>
                        </ol>

                    </div>
                    <div class="modal-footer">
                        <button v-if="pantallaBusqueda==2" type="button" class="btn btn-primary" data-dismiss="modal">Cerrar</button>
                        <button class="btn btn-sm btn-success" @@click="BuscarPorEstado">Generar</button>
                    </div>
                </div>
            </div>
        </div>


        @section Scripts{

            <script>
                var vm = new Vue({
                    el: '#app',
                    data: {
                        pantallaBusqueda: 0,
                        buscandoCronogramaCOF: false,
                        busqueda: "",
                        tipoBusqueda: 0,
                        busquedaItems: [],
                        busquedaSinResultado: false,
                        busquedaLoader: false,
                        resBusqueda: [],
                        creado: new Date().toISOString().substring(0, 10),
                        creditos: [],
                        creditosFiltrados: [],
                        api: "",
                        seleccionados: [],
                        screen: 'lista',
                        total: 0,
                        page: 1,
                        deudaDetalle: "",
                        pagesize: 10,
                        producto: 0,
                        recompra: {
                            recompraID: "",
                            fechaCreacion: "",
                            fechaModificacion: "",
                            fechaConfirmacion: "",
                            archivo: "",
                            monto: "",
                            creditos: [],
                            confirmed: false
                        },
                        detalle: "",
                        cronogramaCOF: "",
                        cronogramaPalanteSeleccionado: 1,
                        cronogramaFondeadorSeleccionado: 1,
                        estados: [],
                        nestados: [
                            { nombre: "Registrados", valor: 1 },
                            { nombre: "Vigentes", valor: 2 },
                            { nombre: "Vencidos", valor: 3 },
                            { nombre: "Pagados", valor: 4 },
                            { nombre: "Desistidos", valor: 6 },
                            { nombre: "Prejudiciales", valor: 16 },
                        ],
                        desde: "",
                        hasta: "",
                        cronogramaPalante: {
                            cuotas: []
                        },
                        cronogramaFondeador: {
                            cuotas: []
                        },
                        total: "0.00"
                    },
                    methods: {
                        reportePendientesAprobacion: async function () {
                            var formData = new FormData();
                            formData.append('FondeadorID', 1);
                            formData.append('desde', this.desde);
                            formData.append('hasta', this.hasta);

                            let res = await fetch(this.api + "Creditos/PendientesPorAprobacion", {
                                method: 'POST',
                                body: formData
                            })
                                .then((transfer) => {
                                    if (transfer.status == 500)
                                        throw true;
                                    return transfer.blob();
                                }).then((bytes) => {
                                    let elm = document.createElement('a');
                                    elm.href = URL.createObjectURL(bytes);
                                    elm.setAttribute('download', "PendientesPorAprobacion.xlsx");
                                    elm.click()
                                }).catch((error) => {
                                    $("#modalMensaje").modal("show");
                                });

                            this.desde = "";
                            this.hasta = "";
                        },
                        reporteCreditosDisponibles: async function () {

                            var formData = new FormData();
                            formData.append('FondeadorID', 1);
                            formData.append('desde', this.desde);
                            formData.append('hasta', this.hasta);

                            let res = await fetch(this.api + "Creditos/DisponiblesPorFondeador", {
                                method: 'POST',
                                body: formData
                            })
                                .then((transfer) => {
                                    if (transfer.status == 500)
                                        throw true;
                                    return transfer.blob();
                                }).then((bytes) => {
                                    let elm = document.createElement('a');
                                    elm.href = URL.createObjectURL(bytes);
                                    elm.setAttribute('download', "DisponiblesParaVenta.xlsx");
                                    elm.click()
                                }).catch((error) => {
                                    $("#modalMensaje").modal("show");
                                });

                            this.desde = "";
                            this.hasta = "";
                        },
                        CronogramaCOF: async function () {
                            this.buscandoCronogramaCOF = true;

                            await fetch(this.api + "Cronogramas/CronogramasPalanteExcel?codigo=" + vm.cronogramaCOF)
                                .then((transfer) => {
                                    return transfer.blob();
                                }).then((bytes) => {
                                    let elm = document.createElement('a');
                                    elm.href = URL.createObjectURL(bytes);
                                    elm.setAttribute('download', "Cronograma-" + vm.cronogramaCOF + ".xlsx");
                                    elm.click()
                                }).catch((error) => {
                                    console.log(error);
                                });

                            this.buscandoCronogramaCOF = false;
                            console.log(res);
                        },
                        BuscarPorEstado: async function () {
                            var formData = new FormData();
                            formData.append('Estados', vm.estados.join(","));

                            let res = await fetch(this.api + "Creditos/PorEstado", {
                                method: 'POST',
                                body: formData
                            })
                                .then((transfer) => {
                                    return transfer.blob();
                                }).then((bytes) => {
                                    let elm = document.createElement('a');
                                    elm.href = URL.createObjectURL(bytes);
                                    elm.setAttribute('download', "CreditosPorEstado.xlsx");
                                    elm.click()
                                }).catch((error) => {
                                    console.log(error);
                                });
                        },
                        ReporteDeuda: async function () {
                            var creditos = this.seleccionados.map(x => x.nCodCred).join(",");
                            console.log(creditos);

                            var formData = new FormData();
                            formData.append('creditos', creditos);
                            formData.append('Fecha', (new Date()).toISOString());

                            let res = await fetch(this.api + "Reportes/ReporteDeuda", {
                                method: 'POST',
                                body: formData
                            })
                                .then((transfer) => {
                                    return transfer.blob();
                                }).then((bytes) => {
                                    let elm = document.createElement('a');
                                    elm.href = URL.createObjectURL(bytes);
                                    elm.setAttribute('download', "analisis.xlsx");
                                    elm.click()
                                }).catch((error) => {
                                    console.log(error);
                                })
                        },
                        formatMoney: (num) => num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                        fecha: function (date) {
                            return moment(date).format("DD/MM/YYYY")
                        },
                        Estado: function (estado) {
                            switch (estado) {
                                case 1:
                                    return "Registrado";
                                case 2:
                                    return "Vigente";
                                case 3:
                                    return "Vencido";
                                case 4:
                                    return "Pagado";
                                case 6:
                                    return "Desistido";
                                case 16:
                                    return "Prejudicial";
                            }
                        },
                        NEstadoCuota: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 1:
                                    return "Vigente";
                                case 2:
                                    return "Vencido";
                                case 3:
                                    return "Por Vencer";
                            }
                        },
                        NEstado: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 0:
                                    return "Sin Pagar";
                                case 2:
                                    return "Pagada";
                            }
                        },
                        Moneda: function (moneda) {
                            switch (moneda) {
                                case 1:
                                    return "S/";
                                case 2:
                                    return "USD";
                            }
                        },
                    },
                    computed: {
                    },
                    async mounted() {
                        this.api = $("#endpoint").val();

                        this.modalBusqueda = $('#exampleModal');

                        this.modalReporteEstado = $('#modalReporteEstado');

                        $("#modalDetalle").on('hidden.bs.modal', function (e) {
                            this.cronogramaPalante = {
                                cuotas: []
                            },
                                this.cronogramaFondeador = {
                                    cuotas: []
                                }
                        });
                    }
                });

            </script>

        }
