@{
    ViewData["Title"] = "Análisis";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}


<div id="app">
    <input type="hidden" id="endpoint" name="endpoint" value="@ViewBag.endpoint" />
    <input type="hidden" id="domain" name="domain" value="@ViewBag.domain" />
    <input type="hidden" id="PagoID" name="PagoID" value="@ViewBag.PagoID" />

    <div class="container">

        <div class="row">
            <div class="col-md-2">
                <label for="busqueda">Buscar: </label>
                <input type="text" class="form-control" id="busqueda" v-model="busqueda" />
                <button class="btn btn-primary" style="margin-top:5px" @@click="buscar" @@keyup.enter="buscar">Buscar</button>
                <img v-if="buscandoCredito" src="~/img/loader.gif" height="25" width="25" alt="Loader image" />
            </div>

            <div class="col-md-10">
                <label>Créditos:</label>

                <div v-if="creditos.length == 0"
                     style="border:dashed 3px gray; height:150px;width:100%; display:flex; flex-direction:row; justify-content:center; align-items:center">
                    <p>
                        <b>Busca algún crédito y se listará aquí.</b>
                    </p>
                </div>

                <div v-if="creditos.length != 0" style="max-height:150px;height:150px;overflow-y:auto;font-size:10pt">
                    <table class="table table-striped table-bordered table-sm table-hover" style="width:100%;font-size:10pt">
                        <thead>
                            <tr>
                                <th scope="col">CodigoFondeador</th>
                                <th scope="col">ID</th>
                                <th scope="col">Nombres</th>
                                <th scope="col">Monto</th>
                                <th scope="col">Fecha Venta</th>
                                <th scope="col">Fecha Ultimo Pago</th>
                                <th scope="col">Fecha Recompra</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="c in creditos" @@click="verCuotas($event, c)" style="cursor:pointer;">
                                <th scope="row">{{c.codigoFondeador}}</th>
                                <td>{{c.id}}</td>
                                <td>{{c.nombres}}</td>
                                <td>{{formatMoney(c.nPrestamo)}}</td>
                                <td>{{c.fechaVenta != undefined ? GetDate(c.fechaVenta) : ''}}</td>
                                <td>{{c.fechaUltimoPago != undefined ? GetDate(c.fechaUltimoPago) : ''}}</td>
                                <td>{{c.fechaRecompra != "1900-01-01T00:00:00" ? GetDate(c.fechaRecompra) : ''}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <label>Cuotas:</label>

                <div v-if="creditoSelected == ''"
                     style="border:dashed 3px gray; height:250px;width:100%; display:flex; flex-direction:row; justify-content:center; align-items:center">
                    <p>
                        <b>Selecciona un crédito y las cuotas se listarán aquí.</b>
                    </p>
                </div>

                <div v-if="creditoSelected != ''" style="max-height:250px;height:250px;overflow-y:auto;font-size:10pt">
                    <table style="font-size:10pt" id="tablaCuotas" class="table table-sm table-hover table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Fec.Vcto.</th>
                                <th scope="col">Estado</th>
                                <th scope="col">Edo. Pago</th>
                                <th scope="col">Amortizacion</th>
                                <th scope="col">Interés</th>
                                <th scope="col">Per. Gracia</th>
                                <th scope="col">Monto</th>
                                <th scope="col">Pagado</th>
                                <th scope="col">Saldo</th>
                                <th scope="col">Cancelado</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="cuota in cuotas"
                                :class="{'table-danger': cuota.nEstadoCuota == 2, 'table-primary': cuota.nEstadoCuota == 1 }">
                                <th scope="row">{{cuota.nNroCuota}}</th>
                                <th>{{GetDate(cuota.dFecVcto)}}</th>
                                <td>{{NEstadoCuota(cuota.nEstadoCuota)}}</td>
                                <td>{{NEstado(cuota.nEstado)}}</td>
                                <td>{{formatMoney(cuota.nCapital)}}</td>
                                <td>{{formatMoney(cuota.nInteres)}}</td>
                                <td>{{formatMoney(cuota.nPerGracia)}}</td>
                                <td>{{formatMoney(cuota.nCuotaMensual)}}</td>
                                <td>{{formatMoney(cuota.pagado)}}</td>
                                <td>{{formatMoney(cuota.saldo)}}</td>
                                <td>{{cuota.fechaPago != '0001-01-01T00:00:00' ? GetDate(cuota.fechaPago) : ''}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>


            </div>
        </div>
    </div>
</div>


@section Scripts{

    <script>
        var vm = new Vue({
            el: '#app',
            data: {
                busqueda: "",
                buscandoCredito: false,
                creditos: [],
                cuotas: [],
                creditoSelected: ""
            },
            methods: {
                buscar: async function () {
                    this.buscandoCredito = true;
                    var formData = new FormData();
                    formData.append('desde', '01-01-2020');
                    formData.append('hasta', (new Date()).toISOString());
                    formData.append('busqueda', this.busqueda);

                    let creditos = await fetch(this.api + "Creditos/CreditosFondeador", {
                        method: 'POST',
                        body: formData
                    }).then(x => x.json());
                    this.buscandoCredito = false;

                    creditos.forEach(x => {
                        if (this.creditos.find(z =>z.codigoFondeador == x.codigoFondeador) == undefined)
                            this.creditos.push(x);
                    });
                },                
                GetDate: function (strDate) {
                    return moment(strDate).format("DD-MM-YYYY");
                },
                verCuotas: async function (event, credito) {
                    this.cuotas = [];
                    
                    $(event.target).parent("tr").siblings().removeClass("table-primary");
                    $(event.target).parent("tr").addClass("table-primary");

                    this.creditoSelected = credito;

                    var formData = new FormData();
                    formData.append('buscar', credito.codigoFondeador);
                    formData.append('cuotasHasta', '01-01-1999');
                    formData.append('estados', '0');

                    let cuotas = await fetch(this.api + "Cuotas/GetCuotasFondeador", {
                        method: 'POST',
                        body: formData
                    }).then(x => x.json());

                    cuotas.forEach(x => {
                        x.saldo = x.nCuotaMensual - x.pagado;
                    });

                    this.cuotas = cuotas;
                },
                formatMoney: function (num) {
                    return num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                },
                NEstadoCuota: function (estadoCuota) {
                    switch (estadoCuota) {
                        case 1:
                            return "Vigente";
                        case 2:
                            return "Vencido";
                        case 3:
                            return "Por Vencer";
                    }
                },
                NEstado: function (estadoCuota) {
                    switch (estadoCuota) {
                        case 0:
                            return "Sin Pagar";
                        case 2:
                            return "Pagada";
                    }
                },
            },
            computed: {

            },
            async mounted() {
                this.api = $("#endpoint").val();
                this.domain = $("#domain").val();
                this.PagoID = $("#PagoID").val();
                        
                this.desde = moment(new Date(2020,0,1)).format("YYYY-MM-DD");
                this.hasta = moment().format("YYYY-MM-DD");       

                fetch(this.api + "Fondeador/All")
                    .then(x => x.json())
                    .then(res => {
                        vm.fondeadores = res;
                        vm.loaderFondeador = false;
                    });

                fetch(this.api + "Producto/All")
                    .then(x => x.json())
                    .then(res => {
                        vm.productos = res;
                        vm.loaderProducto = false;
                    });
            }
        });
    </script>

}
