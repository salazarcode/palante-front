@{
    ViewData["Title"] = "Pagos";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}
<div class="container" id="app">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-hover table-bordered table-sm" style="margin-top:20px">
                <thead>
                    <tr>
                        <th>PagoID</th>
                        <th>Creador</th>
                        <th>Fondeador</th>
                        <th>Producto</th>
                        <th>EsMochila</th>
                        <th>Creditos</th>
                        <th>Monto</th>
                        <th>Fecha Creación</th>
                        <th>Última Modificación</th>
                        <th>Fecha confirmación</th>
                        <th>Ver</th>
                        <th>Eliminar</th>
                        <th>Archivos</th>
                        <th>Cerrar</th>

                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(r, index) in pagos" :class="r.confirmed ? 'table-primary' : 'tr'">
                        <td>{{r.pagoID}}</td>
                        <td>{{r.creadoPor}}</td>
                        <td>{{r.fondeador.nombre}}</td>
                        <td>{{r.producto.cNomCod}}</td>
                        <td>{{r.esMochila == 1 ? 'Sí' : 'No'}}</td>
                        <td>{{distinct(r.detalles, 'codigoFondeador').length}}</td>
                        <td>
                            <a v-if="r.esMochila" href="#" @@click="ir(r)">
                                {{formatMoney(r.detalles.map(x=>x.monto).reduce((a,b)=>parseFloat(a)+parseFloat(b)))}}
                            </a>
                            <span v-if="!r.esMochila" >
                                {{formatMoney(r.detalles.map(x=>x.monto).reduce((a,b)=>parseFloat(a)+parseFloat(b)))}}
                            </span>
                        </td>
                        <td>{{GetDate(r.creado)}}</td>
                        <td>{{GetDate(r.modificado)}}</td>
                        <td>{{r.fechaCierre == '0001-01-01T00:00:00' ? "No Cerrada" : GetDate(r.fechaCierre)}}</td>
                        <td>
                            <a href="#" @@click="verDetalle(index)">Ver</a>
                        </td>
                        <td>
                            <a href="#" data-toggle="modal" data-target="#ConfirmarEliminar" @@click="n = index">Eliminar</a>
                        </td>
                        <td>
                            <a href="#" @@click="getArchivos(r.pagoID)">Archivos</a>
                        </td>
                        <td>
                            <a href="#" data-toggle="modal" data-target="#ConfirmarCierre" @@click="n = r">Confirmar</a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

    </div>



    <div class="modal fade" id="ConfirmarCierre" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmar Cierre</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estas seguro que deseas confirmar este pago?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" @@click="confirmar(n)" data-dismiss="modal">Confirmar</button>
                </div>
            </div>
        </div>
    </div>



    <div class="modal fade" id="ConfirmarEliminar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmar Eliminar</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    ¿Estas seguro que deseas eliminar este pago?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" @@click="eliminar(n)" data-dismiss="modal">Eliminar</button>
                </div>
            </div>
        </div>
    </div>



    <div class="modal fade" id="mensaje" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Mensaje</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    {{mensaje}}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>



    <div class="modal fade" id="detalle" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Detalles de pago {{detalle.pagoID}}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <b>Resumen:</b>
                    <table v-if="detalle!=''" class="table table-hover table-bordered table-sm" style="font-size:10pt" id="data">
                        <thead>
                            <tr>
                                <th>Crédito</th>
                                <th>Monto</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(f, index) in distinct(detalle.detalles, 'codigoFondeador')">
                                <td>{{f}}</td>
                                <td>{{formatMoney(detalle.detalles.filter(a=>a.codigoFondeador==f).map(x=>x.monto).reduce((a,b)=>parseFloat(a)+parseFloat(b)))}}</td>
                            </tr>
                        </tbody>
                    </table>
                    <br />
                    <b>Detalle:</b>
                    <table class="table table-hover table-bordered table-sm" style="font-size:10pt" id="data">
                        <thead>
                            <tr>
                                <th>CodigoFondeador</th>
                                <th>Cuota</th>
                                <th>Monto</th>
                                <th>Concepto</th>
                                <th>EsDeuda</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(c, index) in detalle.detalles" :class="{'table-danger':c.esDeuda == 1}">
                                <td>{{c.codigoFondeador}}</td>
                                <td>{{c.nNroCuota}}</td>
                                <td>{{c.monto.toFixed(2)}}</td>
                                <td>{{c.pagoConcepto != null ? c.pagoConcepto.nombre.toUpperCase() : ''}}</td>
                                <td>{{c.esDeuda == 1 ? 'Deuda' : 'Pago'}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts{

    <script>
        var vm = new Vue({
            el: '#app',
            data: {
                pagos: [],
                api: "@ViewBag.endpoint",
                n: "",
                mensaje: "",
                detalle: ""
            },
            methods: {
                ir: function (p) {
                    location.href = "@(ViewBag.domain+"Pagos/crear")" + "?PagoID=" + p.pagoID + "&fondeador=" + p.fondeador.fondeadorID + "&producto=" + p.producto.nValor + "&mochila=" + (p.esMochila ? 1 : 0) + "&monto=" + p.detalles.map(x => x.monto).reduce((a, b) => parseFloat(a) + parseFloat(b));
                },
                getArchivos: async function (pago) {
                    await fetch(this.api + "Reportes/GetPago?PagoID=" + pago)
                        .then((transfer) => {
                            return transfer.blob();
                        }).then((bytes) => {
                            let elm = document.createElement('a');
                            elm.href = URL.createObjectURL(bytes);
                            elm.setAttribute('download', "pago_" + pago + ".zip");
                            elm.click()
                        }).catch((error) => {
                            console.log(error);
                        })
                },
                GetDate: function (strDate) {
                    return moment(strDate, "YYYYMMDD").format("DD-MM-YYYY");
                },
                formatMoney: function (num) {
                    return num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                },
                confirmar: async function (pago) {
                    if (pago.fechaCierre == '0001-01-01T00:00:00') {
                        await fetch(this.api + "Pagos/Confirmar?pagoID=" + pago.pagoID);
                        window.location.href = '@(ViewBag.domain+"Pagos")';
                    }
                    else {
                        this.mensaje = "Ya se confirmó este pago";
                        $("#mensaje").modal("show");
                    }
                },
                eliminar: async function (index) {
                    if (this.pagos[index].confirmed) {
                        this.mensaje = "No se puede eliminar porque ya ha sido confirmado";
                        $("#mensaje").modal("show");
                    }
                    else {
                        await fetch(this.api + "Pagos/Delete?pagoID=" + vm.pagos[index].pagoID).then(x => x.json());

                        window.location.href = '@(ViewBag.domain+"Pagos")';
                    }
                },
                crear: function () {
                    localStorage.setItem("pagos", JSON.stringify(this.pagos));
                    window.location.href = "@(ViewBag.domain+"Pagos/Crear")";
                },
                verDetalle: function (index) {
                    this.detalle = this.pagos[index];
                    $("#detalle").modal("show");
                },
                doit: function (pago, type, fn, dl) {
                    var elt = document.getElementById('data');
                    var wb = XLSX.utils.table_to_book(elt, { sheet: "Pago-" + pago.pagoID });
                    return dl ?
                        XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }) :
                        XLSX.writeFile(wb, fn || ('pago' + pago.pagoID + '.' + (type || 'xlsx')));
                },
                distinct: function (array, field) {
                    let fields = [... new Set(array.map(a => a[field]))];
                    return fields;
                }
            },
            computed: {
            },
            async mounted() {

                this.productos = await fetch(this.api + "Producto/All").then(x => x.json());
                this.fondeadores = await fetch(this.api + "Fondeador/All").then(x => x.json());
                this.pagos = await fetch(this.api + "Pagos/All").then(x => x.json());

                this.pagos.forEach(p => {
                    p.montoAprobado = p.detalles.map(d => d.monto).reduce((a, b) => parseFloat(a) + parseFloat(b));
                })
            }
        });

    </script>

}