@{
    ViewData["Title"] = "Crear Pago";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

    <div id="app">
        <input type="hidden" id="endpoint" name="endpoint" value="@ViewBag.endpoint" />
        <input type="hidden" id="domain" name="domain" value="@ViewBag.domain" />

        <div class="container">
            <div class="row">
                <div class="col-md-2">
                    <p><b>Fondeador:</b></p>
                    <div class="form-check" v-for="(fondeador, index) in fondeadores">
                        <input class="form-check-input" type="radio" :id="'fondeador'+index" :value="fondeador.fondeadorID" @@change="Filtrar" v-model="f">
                        <label class="form-check-label" :for="'fondeador'+index">
                            {{fondeador.nombre}}
                        </label>
                    </div>
                </div>
                <div class="col-md-2">
                    <p><b>Producto:</b></p>
                    <div class="form-check" v-for="(producto,index) in productos">
                        <input class="form-check-input" type="radio" :id="'producto'+index" :value="producto.nValor" @@change="Filtrar" v-model="p">
                        <label class="form-check-label" :for="'producto'+index">
                            {{producto.cNomCod}}
                        </label>
                    </div>
                </div>
                <div class="col-md-1">
                    <p><b>Disponible:</b></p>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="condisponible" id="disponiblesi" :value="true" v-model="condisponible" @@change="Filtrar" checked>
                        <label class="form-check-label" for="disponiblesi">
                            Sí
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="condisponible" id="disponibleno" :value="false" v-model="condisponible" @@change="Filtrar">
                        <label class="form-check-label" for="disponibleno">
                            No
                        </label>
                    </div>
                </div>
                <div class="col-md-1">
                    <p><b>Mochila:</b></p>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="mochila" id="mochilasi" :value="true" v-model="mochila" @@change="Filtrar">
                        <label class="form-check-label" for="mochilasi">
                            Sí
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="mochila" id="mochilano" :value="false" v-model="mochila" @@change="Filtrar">
                        <label class="form-check-label" for="mochilano">
                            No
                        </label>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-12">
                            <label for="desde"><b>Búsqueda:</b></label>
                        </div>
                        <div class="col-md-12">
                            <div class="row">
                                <div class="col-md-10">
                                    <textarea class="form-control" style="height:38px;width:100%" v-model="query">{{query}}</textarea>
                                </div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-success btn-sm" @@click="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="desde"><b>Disponible desde:</b></label>
                            <input type="date" class="form-control" id="desde" value="" @@change="FiltrarFecha" />
                        </div>
                        <div class="col-md-6">
                            <label for="hasta"><b>Disponible hasta:</b></label>
                            <input type="date" class="form-control" id="hasta" value="" @@change="FiltrarFecha" />
                        </div>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="row">
                        <div class="col-md-12">
                            <button class="btn btn-primary" style="width:100%" @@click="guardar" :disabled="loaderCuotas">Guardar</button>
                            <div v-if="loaderCuotas" style="margin-top:5px">
                                <p>
                                    <img src="~/img/loader.gif" height="25" width="25" alt="Loader image" />
                                    <b>Buscado Cuotas...</b>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <hr style="margin-top:10px;margin-bottom:10px" />


            <div class="row">
                <div class="col-md-6" style="max-height:350px;overflow-y:auto">

                    <div v-if="loaderCreditos"
                         style="border:dashed 3px gray; height:350px;width:100%; display:flex; flex-direction:row; justify-content:center; align-items:center">
                        <p>
                            <img src="~/img/loader.gif" height="40" width="40" alt="Loader image" />
                            <b>Cargando cuotas por crédito... </b>
                        </p>
                    </div>

                    <div v-if="CreditosNoEncontrados">
                        <div id="alertaNoHayCreditos" class="alert alert-warning alert-dismissible fade show" role="alert">
                            <strong>Alerta!</strong> No se encontraron créditos para estos filtros.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>

                    <div v-if="encontrados.length != 0">
                        <p>Resultado de búsqueda. <a href="#" @@click="encontrados = []">Limpiar búsqueda</a></p>
                        <table id="tablaCreditos" style="font-size:10pt" class="table table-success table-sm table-hover table-bordered">
                            <thead>
                                <tr>
                                    <th scope="col">Check</th>
                                    <th scope="col">CodigoFondeador</th>
                                    <th scope="col">ID</th>
                                    <th scope="col">Nombre</th>
                                    <th scope="col">Disponible</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="credito in encontrados" style="cursor:pointer;" @@click="verCuotas($event, credito)">
                                    <th scope="row">
                                        <input type="checkbox"
                                               :value="credito.codigoFondeador"
                                               v-model="checkedCreditos"
                                               @@change="ChangeChecked">
                                    </th>
                                    <th>{{credito.codigoFondeador}}</th>
                                    <th>{{credito.id || ''}}</th>
                                    <th>{{credito.nombres || ''}}</th>
                                    <th>{{formatMoney(credito.disponible) || 0}}</th>
                                </tr>
                            </tbody>
                        </table>
                    </div>


                    <table v-if="creditosFiltrados.length != 0" id="tablaCreditos" style="font-size:10pt" class="table table-sm table-hover table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">
                                    <input type="checkbox"
                                           id="CheckAll"
                                           @@click="CheckAll"
                                           v-model="CheckedAll"
                                           @@change="ChangeChecked">
                                </th>
                                <th scope="col">CodigoFondeador</th>
                                <th scope="col">ID</th>
                                <th scope="col">Nombre</th>
                                <th scope="col">Disponible</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="credito in creditosFiltrados" style="cursor:pointer;" @@click="verCuotas($event, credito)">
                                <th scope="row">
                                    <input type="checkbox"
                                           :value="credito.codigoFondeador"
                                           v-model="checkedCreditos">
                                </th>
                                <th scope="row">{{credito.codigoFondeador}}</th>
                                <th scope="row">{{credito.id || ''}}</th>
                                <th>{{credito.nombres || ''}}</th>
                                <th>{{formatMoney(credito.disponible) || 0}}</th>
                            </tr>
                        </tbody>
                    </table>


                </div>
                <div class="col-md-6" style="max-height:350px;overflow-y:auto">

                    <div v-if="credito == ''"
                         style="border:dashed 3px gray; height:350px; width:100%; display:flex; flex-direction:row; justify-content:center; align-items:center">
                        <p>
                            <b>Selecciona un crédito para ver sus cuotas.</b>
                        </p>
                    </div>

                    <div v-if="credito != ''">
                        <p>Disponible: <b>{{formatMoney(credito.disponible)}}</b></p>

                        <div v-if="loaderCuotas" style="margin-top:5px">
                            <p>
                                <img src="~/img/loader.gif" height="25" width="25" alt="Loader image" />
                                <b>Buscado Cuotas...</b>
                            </p>
                        </div>

                        <table style="font-size:10pt" id="tablaCuotas" class="table table-sm table-hover table-bordered">
                            <thead>
                                <tr>
                                    <th scope="col">NroCuota</th>
                                    <th scope="col">Fec.Vcto.</th>
                                    <th scope="col">Estado</th>
                                    <th scope="col">Edo. Pago</th>
                                    <th scope="col">Monto</th>
                                    <th scope="col">Pagado</th>
                                    <th scope="col">Saldo</th>
                                    <th scope="col">A pagar</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="cuota in cuotas.filter(x=>x.codigoFondeador == credito.codigoFondeador)"
                                    :class="{'table-danger': cuota.nEstadoCuota == 2, 'table-primary': cuota.nEstadoCuota == 1 }">
                                    <th scope="row">{{cuota.nNroCuota}}</th>
                                    <th>{{GetDate(cuota.dFecVcto)}}</th>
                                    <td>{{NEstadoCuota(cuota.nEstadoCuota)}}</td>
                                    <td>{{NEstado(cuota.nEstado)}}</td>
                                    <td>{{formatMoney(cuota.nCuotaMensual)}}</td>
                                    <td>{{formatMoney(cuota.pagado)}}</td>
                                    <td>{{formatMoney(cuota.saldo)}}</td>
                                    <td>
                                        <input type="text"
                                               class="form-control"
                                               name="name"
                                               style="font-size:10pt;max-width:100px"
                                               :value="cuota.aPagar"
                                               @@keyup="changeAPagar(cuota.codigoFondeador, cuota.nNroCuota, $event)" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>



            <div class="modal fade" id="confirmarGuardar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Confirmación</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Confirmas que deseas guardar del pago de total <b>{{total}}</b>, integrado por las cuotas: </p>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                            <button type="button" class="btn btn-primary" @@click="guardar" data-dismiss="modal">Confirmar</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="modalMensaje" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Mensaje</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            {{mensaje}}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @section Scripts{

                <script>
                var vm = new Vue({
                    el: '#app',
                    data: {
                        checkedCreditos: [],
                        cuotas: [],
                        mochila:false,
                        loaderCuotas: false,
                        loaderFondeador: false,
                        loaderProducto: false,
                        productos: [],
                        fondeadores: [],
                        api: "",
                        domain:"",
                        pagos: [],
                        f: 1,
                        mensaje: "",
                        p: 2,
                        total: 0,
                        mensajeFondeadorProducto: "Debes seleccionar Fondeador y Producto antes de seleccionar",
                        pago: {
                            pagoID: "",
                            fechaCreacion: "",
                            fechaModificacion: "",
                            fechaConfirmacion: "",
                            monto: "",
                            cuotas: [],
                            confirmed: false
                        },
                        detalle: "",
                        seleccionadoTodo: "",
                        creditoDetallado: "",
                        creditos: [],
                        creditosFiltrados: [],
                        credito: "",
                        concof: false,
                        query: "",
                        encontrados: [],
                        condisponible: true,
                        fecha: new Date(),
                        loaderCreditos: false,
                        CreditosNoEncontrados: false,
                        loaderCuotas: false,
                        alertCuotasPorVencer: false,
                        CheckedAll: false,
                        estados: [
                            1,2
                        ]
                    },
                    methods: {
                        ChangeChecked: async function () {
                            let faltantes = []
                            this.loaderCuotas = true;

                            if (vm.cuotas.length == 0 && vm.checkedCreditos.length != 0)
                                faltantes = vm.checkedCreditos
                            else {
                                vm.checkedCreditos.forEach(e => {
                                    if (!vm.cuotas.map(a => a.codigoFondeador).includes(e)) {
                                        faltantes.push(e);
                                    }
                                })
                            }

                            

                            var formData = new FormData();
                            formData.append('buscar', faltantes.join(','));

                            let cuotasRes = await fetch(this.api + "Cuotas/GetCuotasFondeador", {
                                method: 'POST',
                                body: formData
                            }).then(x=>x.json())

                            cuotasRes.forEach(x => {
                                x.saldo = x.nCuotaMensual - x.pagado;
                                x.aPagar = 0;
                            });

                            cuotasRes.forEach(x => vm.cuotas.push(x));

                            this.creditos.forEach(c => {
                                let d = c.disponible;
                                vm.cuotas.filter(a => a.codigoFondeador == c.codigoFondeador).forEach(cu => {
                                    if (d >= cu.saldo) {
                                        cu.aPagar = parseFloat(cu.saldo.toFixed(2));
                                        d = d - cu.saldo;
                                    }
                                    else {
                                        cu.aPagar = parseFloat(d.toFixed(2));
                                        d = 0;
                                    }
                                });
                            });
                            this.loaderCuotas = false;
                        },
                        verCuotas: async function (event, credito) {
                            $(event.target).parent("tr").siblings().removeClass("table-primary");
                            $(event.target).parent("tr").addClass("table-primary");

                            this.loaderCuotas = true;

                            var formData = new FormData();
                            formData.append('buscar', credito.codigoFondeador);

                            let cuotasRes = await fetch(this.api + "Cuotas/GetCuotasFondeador", {
                                method: 'POST',
                                body: formData
                            }).then(x=>x.json());


                            if (!vm.cuotas.map(x => x.codigoFondeador).includes(cuotasRes.codigoFondeador)) {
                                cuotasRes.forEach(x => {
                                    x.saldo = x.nCuotaMensual - x.pagado;
                                    x.aPagar = 0;
                                });

                                cuotasRes.forEach(x => vm.cuotas.push(x));

                                this.creditos.forEach(c => {
                                    let d = c.disponible;
                                    vm.cuotas.filter(a => a.codigoFondeador == c.codigoFondeador).forEach(cu => {
                                        if (d >= cu.saldo) {
                                            cu.aPagar = parseFloat(cu.saldo.toFixed(2));
                                            d = d - cu.saldo;
                                        }
                                        else {
                                            cu.aPagar = parseFloat(d.toFixed(2));
                                            d = 0;
                                        }
                                    });
                                });
                            }

                            this.loaderCuotas = false;

                            this.credito = credito;
                        },
                        changeAPagar: function (codigo, cuota, evento) {
                            let valor = $(evento.target).val();
                            let suma = this.cuotas
                                .cuotas.filter(y => y.codigoFondeador == codigo && y.nNroCuota != cuota)
                                .map(z => z.aPagar)
                                .reduce((a, b) => parseFloat(a) + parseFloat(b)) + parseFloat(valor);

                            if (suma > this.creditos.find(y => y.codigoFondeador == codigo).disponible) {
                                event.target.value = this.cuotas.find(y => y.codigoFondeador == codigo && y.nNroCuota == cuota).aPagar;
                                this.mensaje = "El monto suma en total, una cantidad mayor al disponible por este crédito.";
                                $("#modalMensaje").modal("show");
                            }
                            else {
                                this.cuotas.find(y => y.codigoFondeador == codigo && y.nNroCuota == cuota).aPagar = valor;
                            }
                        },
                        FiltrarFecha: async function () {

                            await this.mainSearch();
                        },
                        changeEstado: async function () {

                            await this.mainSearch();
                        },
                        Buscar: function () {
                            this.encontrados = [];

                            this.query.split("\n").forEach(query => {
                                var search = new RegExp(query.trim().toUpperCase(), 'i');
                                var res = this.creditos.find(x => search.test(x.codigoFondeador) || search.test(x.nombres) || search.test(x.id) || search.test(x.nCodCred.toString()));

                                if (res != undefined) {
                                    if (this.creditosFiltrados.filter(x => x.codigoFondeador == res.codigoFondeador).length == 0) {
                                        this.mensaje = "El resultado hallado no pertenece a este fondeador, producto o " + (vm.condisponible ? "no tiene monto disponible" : "tiene disponible");
                                        $("#modalMensaje").modal("show");
                                    } else {
                                        this.encontrados.push(res)
                                    }
                                }
                                else {
                                    this.mensaje = "No se hallaron resultados";
                                    $("#modalMensaje").modal("show");
                                }
                            });
                        },
                        formatMoney: function (num) {
                            return num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        },
                        GetDate: function (strDate) {
                            return moment(strDate).format("DD-MM-YYYY");
                        },
                        sumatoria: function () {
                            let res = 0;
                            this.cuotasFiltradas.filter(x => x.selected).forEach(x => {
                                res += x.aPagar;
                            });
                            this.total = res;
                        },
                        vigente: function (fecha) {
                            return fecha.getMonth() == (new Date()).getMonth();
                        },
                        formatDate: function (fecha) {
                            return moment(fecha).format("DD/MM/YYYY");
                        },
                        guardar: async function () {
                            var aux = vm.cuotas
                                .filter(x => vm.creditosFiltrados
                                    .filter(e => vm.checkedCreditos.includes(e.codigoFondeador))
                                    .map(c => c.codigoFondeador)
                                    .includes(x.codigoFondeador) && x.aPagar != 0 && x.aPagar != '');
                            var pagos = aux.map(x => {
                                var joined = [];
                                joined.push(x.codigoFondeador);
                                joined.push(x.nNroCuota);
                                joined.push(parseFloat(x.aPagar));
                                joined.push(false)

                                return joined.join(",")
                            });
                            /*
                            var deudas = aux.filter(e => e.cuentaPorCobrar != 0).map(x => {
                                var joined = [];
                                joined.push(x.nCodCred);
                                joined.push(x.nNroCalendario);
                                joined.push(x.nNroCuota);
                                joined.push(parseFloat(x.cuentaPorCobrar));
                                joined.push(true)

                                return joined.join(",")
                            });
                            */

                            var detalles = pagos;
                            //deudas.forEach(x => detalles.push(x));

                            var formData = new FormData();
                            formData.append('pagoID', 0);
                            formData.append('FondeadorID', vm.f);
                            formData.append('ProductoID', vm.p);
                            formData.append('Creador', JSON.parse(localStorage.getItem("usuario")).nombre);
                            formData.append('Pagos', detalles.join(";"));

                            let res = await fetch(this.api + "Pagos/Save", {
                                method: 'POST',
                                body: formData
                            }).then(response => response.json());

                            window.location.href = '@(ViewBag.domain+"Pagos")';
                        },
                        random: function (min, max) {
                            return Math.floor(Math.random() * max) + min;
                        },
                        NEstadoCuota: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 1:
                                    return "Vigente";
                                case 2:
                                    return "Vencido";
                                case 3:
                                    return "Por Vencer";
                            }
                        },
                        NEstado: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 0:
                                    return "Sin Pagar";
                                case 2:
                                    return "Pagada";
                            }
                        },
                        Filtrar: function () {
                            this.creditosFiltrados = []
                            vm.cuotas = [];
                            vm.checkedCreditos = [];

                            if (this.mochila) {
                                if (this.condisponible)
                                    this.creditosFiltrados = this.creditos.filter(x => x.nSubProd == vm.p && x.fondeador == vm.f && x.disponible != 0 && x.id == undefined);
                                else
                                    this.creditosFiltrados = this.creditos.filter(x => x.nSubProd == vm.p && x.fondeador == vm.f && x.disponible == 0 && x.id == undefined);

                                this.creditosFiltrados
                            } else {
                                if (this.condisponible)
                                    this.creditosFiltrados = this.creditos.filter(x => x.nSubProd == vm.p && x.fondeador == vm.f && x.disponible != 0 && x.id != undefined);
                                else
                                    this.creditosFiltrados = this.creditos.filter(x => x.nSubProd == vm.p && x.fondeador == vm.f && x.disponible == 0 && x.id != undefined);

                                this.creditosFiltrados
                            }


                            if (this.creditosFiltrados.length == 0)
                                this.CreditosNoEncontrados = true;
                            else
                                this.CreditosNoEncontrados = false;
                            
                        },
                        mainSearch: async function () {
                            /*
                            this.cuotas = [];
                            this.creditos = [];
                            this.creditosFiltrados = [];
                            this.credito = ""
                            */
                            let desde = $("#desde").val();
                            let hasta = $("#hasta").val();

                            var formData = new FormData();
                            formData.append('desde', desde);
                            formData.append('hasta', hasta);

                            this.loaderCreditos = true;
                            let creditosRes = await fetch(this.api + "Creditos/CreditosFondeador", {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => response.json());

                            vm.creditos = creditosRes;

                            this.loaderCreditos = false;

                            this.Filtrar();

                            /*

  
                            this.creditos.forEach(c => {
                                let d = c.disponible;
                                vm.cuotas.filter(a => a.codigoFondeador == c.codigoFondeador).forEach(cu => {
                                    if (d >= cu.saldo) {
                                        cu.aPagar = parseFloat(cu.saldo.toFixed(2));
                                        d = d - cu.saldo;
                                    }
                                    else {
                                        cu.aPagar = parseFloat(d.toFixed(2));
                                        d = 0;
                                    }
                                });
                            });    */  

                        },
                        CheckAll: function () {
                            if (!this.CheckedAll)
                                this.creditosFiltrados.map(x => x.codigoFondeador).forEach(e => {
                                    vm.checkedCreditos.push(e);
                                });
                            else
                                vm.checkedCreditos = [];
                        },
                        BuscarCuotasPorVencer: async function () {
                            let codigoFondeador = vm.credito.codigoFondeador;

                            let desde = $("#desde").val();
                            let hasta = $("#hasta").val();

                            var formData = new FormData();
                            formData.append('pagosDesde', desde);
                            formData.append('pagosHasta', hasta);
                            formData.append('codigoFondeador', codigoFondeador);

                            this.loaderCuotas = true;

                            let cuotas = await fetch(this.api + "Cuotas/GetCuotasPorVencer", {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => response.json());

                            this.loaderCuotas = false;

                            if (cuotas.length == 0) {
                                this.alertCuotasPorVencer = true;
                                return;
                            }

                            cuotas.forEach(x => {
                                x.saldo = x.nCuotaMensual - x.pagado;
                                x.aPagar = 0;
                            });

                            this.creditos.find(x=>x.codigoFondeador == codigoFondeador).cuotas

                            console.log(cuotas);
                            
                            cuotas.forEach(c => {
                                vm.cuotas.push(c);
                                vm.creditos.find(x => x.codigoFondeador == vm.credito.codigoFondeador).cuotas.push(c);
                                vm.creditos.find(x => x.codigoFondeador == codigoFondeador).disponible = null ? vm.cuotas.filter(z => z.codigoFondeador == codigoFondeador).map(d => d.saldo).reduce((a, b) => parseFloat(a) + parseFloat(b)) : vm.cuotas.filter(z => z.codigoFondeador == codigoFondeador).map(x => x.disponible)[0]
                            });


                            this.creditos.forEach(c => {
                                let d = c.disponible;
                                vm.cuotas.filter(a => a.codigoFondeador == c.codigoFondeador).forEach(cu => {
                                    if (d >= cu.saldo) {
                                        cu.aPagar = parseFloat(cu.saldo.toFixed(2));
                                        d = d - cu.saldo;
                                    }
                                    else {
                                        cu.aPagar = parseFloat(d.toFixed(2));
                                        d = 0;
                                    }
                                });
                            });
                            
                        }
                    },
                    computed: {
                        suma: function () {
                            let res = 0;
                            this.cuotasFiltradas.filter(x => x.selected).forEach(x => {
                                res += x.aPagar;
                            });
                            return res;
                        }
                    },
                    async mounted() {
                        this.api = $("#endpoint").val();
                        this.domain = $("#domain").val();

                        $("#desde").val(moment().subtract(1, 'months').format("YYYY-MM-DD"));
                        $("#hasta").val(moment().format("YYYY-MM-DD"));

                        this.loaderFondeador = true;
                        this.loaderProducto = true;

                        fetch(this.api + "Fondeador/All")
                            .then(x => x.json())
                            .then(res => {
                                vm.fondeadores = res;
                                vm.loaderFondeador = false;
                            });

                        fetch(this.api + "Producto/All")
                            .then(x => x.json())
                            .then(res => {
                                vm.productos = res;
                                vm.loaderProducto = false;
                            });

                        this.mainSearch();

                        $('#alertaNoHayCreditos').on('closed.bs.alert', function () {
                            this.CreditosNoEncontrados = false;
                        })
                        $('#alertCuotasPorVencer').on('closed.bs.alert', function () {
                            this.alertCuotasPorVencer = false;
                        })


                    }
                });

                </script>

        }
