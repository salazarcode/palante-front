@{
    ViewData["Title"] = "Crear Pago";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

    <div id="app">
        <input type="hidden" id="endpoint" name="endpoint" value="@ViewBag.endpoint" />
        <input type="hidden" id="domain" name="domain" value="@ViewBag.domain" />

        <div class="container">
            <div class="row">
                <div class="col-md-12" style="max-height:400px;overflow-y:auto">

                    <div id="accordion">
                        <div class="card" v-for="credito in creditos">
                            <div class="card-header" id="headingOne">
                                <h5 class="mb-0">
                                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        {{credito.nCodCred}} - {{credito.dni}} - {{credito.ruc}} - {{credito.nombres}} - {{credito.razonSocial}}
                                    </button>
                                </h5>
                            </div>

                            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                                <div class="card-body">
                                    <ul>
                                        <li
                                            v-for="cuota in credito.cuotasVencidasVigentes"                                            
                                            >
                                            Nro.: {{cuota.nCuota}}, Monto: {{cuota.nCuotaMensual}}
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            </div>



            <div class="modal fade" id="confirmarGuardar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Confirmación</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Confirmas que deseas guardar del pago de total <b>{{total}}</b>, integrado por las cuotas: </p>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                            <button type="button" class="btn btn-primary" @@click="guardar" data-dismiss="modal">Confirmar</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="modalMensaje" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Mensaje</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            {{mensaje}}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="modalDetalle" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Confirmación</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <table class="table table-hover table-bordered table-sm">
                                <tr>
                                    <td>NroCuota</td>
                                    <td>Monto</td>
                                    <td>Vencimiento</td>
                                </tr>
                                <tr v-for="cuota in creditoDetallado.cuotas" :class="{'table-primary': vigente(cuota.vencimiento)}">
                                    <td>{{cuota.cuota}}</td>
                                    <td>{{cuota.monto}}</td>
                                    <td>{{formatDate(cuota.vencimiento)}}</td>
                                </tr>
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @section Scripts{

                <script>
                var vm = new Vue({
                    el: '#app',
                    data: {
                        cuotas: [],
                        loaderCuotas: false,
                        loaderFondeador: false,
                        loaderProducto: false,
                        productos: [],
                        fondeadores: [],
                        api: "",
                        domain:"",
                        pagos: [],
                        f: 0,
                        mensaje: "",
                        p: 0,
                        total: 0,
                        mensajeFondeadorProducto: "Debes seleccionar Fondeador y Producto antes de seleccionar",
                        pago: {
                            pagoID: "",
                            fechaCreacion: "",
                            fechaModificacion: "",
                            fechaConfirmacion: "",
                            monto: "",
                            cuotas: [],
                            confirmed: false
                        },
                        detalle: "",
                        seleccionadoTodo: "",
                        creditoDetallado: "",
                        creditos: []
                    },
                    methods: {
                        changeAPagar: function (index) {
                            let c = this.cuotasFiltradas[index];

                            c.cuentaPorCobrar = c.aPagar < c.disponible ? 0 : c.aPagar - c.disponible;

                            this.cuotasFiltradas[index].cuentaPorCobrar = c.cuentaPorCobrar;
                        },
                        filter: function () {
                            if (this.f != 0 && this.p != 0) {
                                this.cuotasFiltradas = [];
                                this.cuotas.filter(x => x.nSubProd == vm.p && x.fondeadorID == vm.f)
                                    .forEach(e => vm.cuotasFiltradas.push(e));
                            }
                        },
                        DetalleCredito: function (credito) {
                            //Busco detalle del crédito
                            this.creditoDetallado = {
                                nCodCred: credito,
                                cuotas: [
                                    {
                                        cuota: 1,
                                        monto: 123.21,
                                        vencimiento: new Date()
                                    },
                                    {
                                        cuota: 2,
                                        monto: 123.21,
                                        vencimiento: new Date(2020, 5, 27)
                                    },
                                    {
                                        cuota: 3,
                                        monto: 123.21,
                                        vencimiento: new Date(2020, 6, 27)
                                    }
                                ]
                            };
                            $("#modalDetalle").modal("show");
                        },
                        CubrirDeficit: function () {
                            if (this.f == 0 || this.p == 0) {
                                this.mensaje = this.mensajeFondeadorProducto;
                                $("#modalMensaje").modal("show");
                                return;
                            }
                            this.cuotasFiltradas.filter(x => x.disponible < x.monto && x.selected == true).forEach(x => {
                                if (x.disponible < x.monto)
                                    x.cuentaPorCobrar = x.monto - x.disponible;
                            });
                            this.sumatoria();
                        },

                        formatMoney: function (num) {
                            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        },
                        seleccionarTodo: function () {
                            if (this.f == 0 || this.p == 0) {
                                this.mensaje = this.mensajeFondeadorProducto;
                                $("#modalMensaje").modal("show");
                                return;
                            }
                            this.seleccionadoTodo = !this.seleccionadoTodo;
                            this.cuotasFiltradas.forEach(x => {
                                x.selected = vm.seleccionadoTodo;
                            });
                            this.sumatoria();
                        },
                        seleccionar: function (event, index) {
                            if (this.f == '' || this.p == 0) {
                                this.mensaje = this.mensajeFondeadorProducto;
                                $("#modalMensaje").modal("show");
                                return;
                            }
                            if (event.target.tagName != 'A') {
                                this.cuotasFiltradas[index].selected = !this.cuotasFiltradas[index].selected;
                                this.sumatoria();
                            }
                        },
                        GetDate: function (strDate) {
                            return moment(strDate).format("DD-MM-YYYY");
                        },
                        sumatoria: function () {
                            let res = 0;
                            this.cuotasFiltradas.filter(x => x.selected).forEach(x => {
                                res += x.aPagar;
                            });
                            this.total = res;
                        },
                        vigente: function (fecha) {
                            return fecha.getMonth() == (new Date()).getMonth();
                        },
                        formatDate: function (fecha) {
                            return moment(fecha).format("DD/MM/YYYY");
                        },
                        guardar: async function () {
                            var aux = this.cuotasFiltradas.filter(x => x.selected == true);
                            var pagos = aux.map(x => {
                                var joined = [];
                                joined.push(x.nCodCred);
                                joined.push(x.nNroCalendario);
                                joined.push(x.nNroCuota);
                                joined.push(parseFloat(x.aPagar));
                                joined.push(false)

                                return joined.join(",")
                            });

                            var deudas = aux.filter(e => e.cuentaPorCobrar != 0).map(x => {
                                var joined = [];
                                joined.push(x.nCodCred);
                                joined.push(x.nNroCalendario);
                                joined.push(x.nNroCuota);
                                joined.push(parseFloat(x.cuentaPorCobrar));
                                joined.push(true)

                                return joined.join(",")
                            });

                            var detalles = pagos;
                            deudas.forEach(x => detalles.push(x));

                            var formData = new FormData();
                            formData.append('pagoID', 0);
                            formData.append('FondeadorID', this.f == 'COOPAC' ? 1 : 2);
                            formData.append('ProductoID', this.p);
                            formData.append('Creador', 'krobles');
                            formData.append('Pagos', detalles.join(";"));

                            let res = await fetch(this.api + "Pagos/Save", {
                                method: 'POST',
                                body: formData
                            }).then(response => response.json());
                            window.location.href = '@(ViewBag.domain+"Pagos")';
                        },
                        random: function (min, max) {
                            return Math.floor(Math.random() * max) + min;
                        }
                    },
                    computed: {
                        suma: function () {
                            let res = 0;
                            this.cuotasFiltradas.filter(x => x.selected).forEach(x => {
                                res += x.aPagar;
                            });
                            return res;
                        }
                    },
                    async mounted() {
                        this.api = $("#endpoint").val();
                        this.domain = $("#domain").val();

                        this.loaderCuotas = true;

                        this.loaderFondeador = true;
                        this.loaderProducto = true;
                        var formData = new FormData();
                        formData.append('nEstadoCuota', "1,2");
                        formData.append('nEstado', "0");

                        this.creditos = await fetch(this.api + "Cuotas/PorEstados", {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => response.json());


                        fetch(this.api + "Fondeador/All")
                            .then(x => x.json())
                            .then(res => {
                                vm.fondeadores = res;
                                vm.loaderFondeador = false;
                            });

                        fetch(this.api + "Producto/All")
                            .then(x => x.json())
                            .then(res => {
                                vm.productos = res;
                                vm.loaderProducto = false;
                            });
                    }
                });

                </script>

        }
