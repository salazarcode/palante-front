@{
    ViewData["Title"] = "Nueva recompra";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

    <div id="app">
        <input type="hidden" id="endpoint" name="endpoint" value="@ViewBag.endpoint" />

        <div class="container">
            <div class="row">
                <div class="col-md-2">
                    <p><b>Fondeador:</b></p>
                    <div class="form-check" v-for="(fondeador, index) in fondeadores">
                        <input class="form-check-input" type="radio" :id="'fondeador'+index" :value="fondeador.fondeadorID" @@change="Filtrar" v-model="f">
                        <label class="form-check-label" :for="'fondeador'+index">
                            {{fondeador.nombre}}
                        </label>
                    </div>
                </div>
                <div class="col-md-2">
                    <p><b>Producto:</b></p>
                    <div class="form-check" v-for="(producto,index) in productos">
                        <input class="form-check-input" type="radio" :id="'producto'+index" :value="producto.nValor" @@change="Filtrar" v-model="p">
                        <label class="form-check-label" :for="'producto'+index">
                            {{producto.cNomCod}}
                        </label>
                    </div>
                </div>
                <div class="col-md-3">
                    <label for="desde"><b>Búsqueda:</b></label>
                    <textarea class="form-control" style="height:38px" v-model="query" placeholder="id, credito, nombre..." @@keyup="changeQuery">{{query}}</textarea>
                    <button type="button" style="margin-top:5px" class="btn btn-success btn-sm" @@click="Buscar">Buscar</button>
                </div>
                <div class="col-md-3">
                    <label for="desde"><b>Fecha cálculo:</b></label>
                    <input type="date" class="form-control" id="fechaCalculo" v-model="fechaCalculo" @@change="CalcularSeleccionados" />
                </div>
                <div class="col-md-2">
                    <label>Total recompra:</label>
                    <input type="text" class="form-control" disabled name="name" :value="sumatoria" />
                    <button style="width:100%;margin-top:5px" class="btn btn-success" @@click="Guardar">Guardar</button>
                </div>
            </div>
            <hr />
            <div class="row" style="margin-top:10px;">
                <div class="col-md-6">

                    <div v-if="loaderCreditos"
                         style="border:dashed 3px gray; height:350px;width:100%; display:flex; flex-direction:row; justify-content:center; align-items:center">
                        <p>
                            <img src="~/img/loader.gif" height="40" width="40" alt="Loader image" />
                            <b>Cargando cuotas por crédito... </b>
                        </p>
                    </div>


                    <div v-if="!loaderCreditos">
                        <p v-if="encontrados.length != 0">Resultado de búsqueda. <a href="#" @@click="encontrados = []">Limpiar búsqueda</a></p>
                        <table v-if="encontrados.length != 0" style="font-size:10pt;" class="table table-sm table-hover table-bordered table-success">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        <input type="checkbox"
                                               v-model="checkEncontradosValue"
                                               @@change="checkEncontrados">
                                    </th>
                                    <th scope="col">CodigoFondeador</th>
                                    <th scope="col">ID</th>
                                    <th scope="col">Nombre</th>
                                    <th scope="col">Es Repro</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="credito in encontrados" style="cursor:pointer;" @@click="verCalculos($event, credito)">
                                    <th scope="row">
                                        <input type="checkbox"
                                               :value="credito.codigoFondeador"
                                               v-model="checkedCreditos"
                                               @@change="">
                                    </th>
                                    <th>{{credito.codigoFondeador}}</th>
                                    <th>{{credito.id || ''}}</th>
                                    <th>{{credito.nombres || ''}}</th>
                                    <th>{{credito.esReprogramado ? 'Sí' : 'No'}}</th>
                                </tr>
                            </tbody>
                        </table>

                        <p>{{creditosFiltrados.length}} registros</p>
                        <div style="max-height:350px;overflow-y:auto">
                            <table id="tablaCreditos" style="font-size:10pt;" class="table table-sm table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Check</th>
                                        <th scope="col">CodigoFondeador</th>
                                        <th scope="col">ID</th>
                                        <th scope="col">Nombre</th>
                                        <th scope="col">Es Repro</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="c in creditosFiltrados" style="cursor:pointer;" @@click="verCalculos($event, c)" :class="{'table-primary': c.codigoFondeador == credito.codigoFondeador}">
                                        <th scope="row">
                                            <input type="checkbox"
                                                   :value="c.codigoFondeador"
                                                   v-model="checkedCreditos"
                                                   @@change="CalcularSeleccionados">
                                        </th>
                                        <th>{{c.codigoFondeador}}</th>
                                        <th>{{c.id || ''}}</th>
                                        <th>{{c.nombres || ''}}</th>
                                        <th>{{c.esReprogramado ? 'Sí' : 'No'}}</th>
                                    </tr>
                                </tbody>
                            </table>

                        </div>

                    </div>

                </div>
                <div class="col-md-6">
                    <div v-if="credito != ''">
                        <b>Datos del crédito:</b>
                        <table id="tablaCreditos" style="font-size:10pt;width:100%" class="table table-sm table-hover table-bordered">

                            <tr>
                                <th scope="row">Crédito</th>
                                <th scope="row">ID</th>
                                <th scope="row">Nombres</th>
                            </tr>

                            <tr>
                                <td>{{credito.codigoFondeador}}</td>
                                <td>{{credito.id}}</td>
                                <td>{{credito.nombres}}</td>
                            </tr>
                        </table>


                        <b>Resumen:</b>
                        <table id="tablaCreditos" style="font-size:10pt;width:100%" class="table table-sm table-hover table-bordered">
                            <tr>
                                <th scope="row">Capital total:</th>
                                <td>
                                    <input type="number"
                                           style="height:25px"
                                           class="form-control" 
                                           v-model="credito.CapitalTotal"
                                           @@keyup="SetPrecio(credito)"/>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Per. Gracia total:</th>
                                <td>
                                    <input type="number"
                                           style="height:25px"
                                           class="form-control"
                                           v-model="credito.GraciaTotal"
                                           @@keyup="SetPrecio(credito)"/>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Interés total:</th>
                                <td>
                                    <input type="number"
                                           style="height:25px"
                                           class="form-control"
                                           v-model="credito.InteresTotal"
                                           @@keyup="SetPrecio(credito)"/>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">
                                    Precio de Recompra
                                    <i 
                                       style="color:blue;cursor:pointer" 
                                       class="fa fa-retweet"
                                       title="Restaurar valor estandar"
                                       @@click="SetPrecioRecompra(credito)"
                                       ></i>
                                </th>
                                <td>
                                    <div class="row">
                                        <div class="col-md-11">
                                            <input type="number"
                                                   style="height:25px"
                                                   class="form-control primary" 
                                                   disabled
                                                   v-model="credito.precioRecompra" />
                                        </div>
                                        <div class="col-md-1">
                                            <input type="checkbox"
                                                   data-toggle="tooltip" data-placement="top" title="Activar Cálculo Diario"
                                                   :disabled="credito.Interes == 0"
                                                   id="checkCalculoDiario"
                                                   v-model="credito.CalcularDiariamente"
                                                   @@change="SetPrecioRecompra(credito)"
                                                   style="width: 15px;height:15px;float:right">
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </table>

                        <b>Cuotas pendientes:</b>
                        <table id="tablaCreditos" style="font-size:10pt;width:100%" class="table table-sm table-hover table-bordered">

                            <tr class="table-warning">
                                <th scope="row">Capital</th>
                                <td>
                                    {{formatMoney(credito.capitalVigenteVencido) || 0}}

                                    <input type="checkbox"
                                           data-toggle="tooltip" data-placement="top" title="Con Capital"
                                           :checked="true"
                                           disabled
                                           style="width: 15px;height:15px;float:right">
                                </td>
                            </tr>
                            <tr class="table-warning">
                                <th scope="row">Periodo de Gracia</th>
                                <td>
                                    {{formatMoney(credito.graciaVigenteVencido) || 0}}
                                    <input type="checkbox"
                                           data-toggle="tooltip" data-placement="top" title="Con Periodo de Gracia"
                                           id="checkConPeriodoGracia"
                                           v-model="credito.ConPeriodoGracia"
                                           @@change="SetPrecioRecompra(credito)"
                                           style="width: 15px;height:15px;float:right">
                                </td>
                            </tr>
                            <tr class="table-warning">
                                <th scope="row">Interés</th>
                                <td>
                                    {{formatMoney(credito.interesVigenteVencido) || 0}}

                                    <input type="checkbox"
                                           data-toggle="tooltip"
                                           data-placement="top"
                                           title="Con Interés"
                                           :checked="!(credito.CalcularDiariamente)"
                                           disabled
                                           style="width: 15px;height:15px;float:right">
                                </td>
                            </tr>
                            <tr class="table-success">
                                <th scope="row">Capital por vencer</th>
                                <td>{{formatMoney(credito.capitalPorVencer) || 0}}</td>
                            </tr>
                        </table>

                        <b v-if="credito.CalcularDiariamente">Cálculo de interés diario:</b>

                        <table v-if="credito.CalcularDiariamente" id="tablaCreditos" style="font-size:10pt;width:100%" class="table table-sm table-hover table-bordered">
                            <tr>
                                <th scope="row">Último Pago</th>
                                <td>{{fecha(credito.fechaUltimoPago) || 0}}</td>
                            </tr>

                            <tr>
                                <th scope="row">Fecha cálculo</th>
                                <td>{{fecha(fechaCalculo)}}</td>
                            </tr>

                            <tr>
                                <th scope="row">Días de diferencia</th>
                                <td>{{credito.DiferenciaDias}}</td>
                            </tr>

                            <tr>
                                <th scope="row">Tasa</th>
                                <td>
                                    <input type="number"
                                           class="form-control"
                                           style="height:25px"
                                           v-model="credito.nTasaComp"
                                           @@keyup="Calcular(credito)" />
                                </td>
                            </tr>

                            <tr>
                                <th scope="row">Factor</th>
                                <td>
                                    {{credito.Factor}}
                                </td>
                            </tr>

                            <tr>
                                <th scope="row">Interés Cálculo Diario</th>
                                <td>
                                    {{formatMoney(credito.Interes)}}
                                </td>
                            </tr>
                        </table>
                    </div>

                    
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalMensaje" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Mensaje</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        {{mensaje}}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>


        @section Scripts{

            <script>
                var vm = new Vue({
                    el: '#app',
                    data: {
                        creditos: [],
                        recompraID: @ViewBag.editar,
                        loaderCreditos: false,
                        f: 1,
                        p: 2,
                        fondeadores: [],
                        productos: [],
                        checkedCreditos: [],
                        creditosFiltrados: [],
                        credito: "",
                        query: "",
                        encontrados: [],
                        fechaCalculo: moment().format("YYYY-MM-DD"),
                        mensaje: "",
                        checkEncontradosValue: false
                    },
                    methods: {
                        changeQuery: function () {
                            let arr = this.query.split('\n');
                            arr.forEach((item, index) => {
                                if (item.trim() == "")
                                    arr.splice(index, 1);
                            });
                            this.query = arr.join("\n");
                        },
                        checkEncontrados: function () {
                            if (this.checkEncontradosValue) {
                                this.encontrados.map(x => x.codigoFondeador)
                                    .forEach(a => {
                                    if (!this.checkedCreditos.includes(a)) {
                                        this.checkedCreditos.push(a);
                                    }
                                });
                            } else {
                                this.encontrados.map(x => x.codigoFondeador)
                                    .forEach(a => {
                                        let index = this.checkedCreditos.findIndex(e => e.codigo == a);
                                        this.checkedCreditos.splice(index, 1);
                                });
                            }
                        },
                        CalcularSeleccionados: function () {
                            vm.creditos.filter(x => vm.checkedCreditos.includes(x.codigoFondeador)).forEach(credito => {
                                let obj = this.creditos.find(x => x.codigoFondeador == credito.codigoFondeador);
                                vm.Calcular(obj);
                            });

                            if (this.credito != "") {
                                this.Calcular(this.credito);
                            }
                        },
                        Calcular: function (credito) {
                            credito.DiferenciaDias = this.DiferenciaDias(credito.fechaUltimoPago, this.fechaCalculo);

                            console.log(credito.nTasaComp, credito.DiferenciaDias);

                            credito.Factor = Math.pow(1 + parseFloat(credito.nTasaComp) / 100, parseFloat(credito.DiferenciaDias) / parseFloat(360)) - 1;

                            let base = 1 + parseFloat(credito.nTasaComp) / 100
                            let exponente = parseFloat(credito.DiferenciaDias) / parseFloat(360)

                            let a = Math.pow(base, exponente) - 1;
                            let b = parseFloat(credito.capitalPorVencer + credito.capitalVigenteVencido);

                            credito.Interes = a * b;

                            this.SetPrecioRecompra(credito);
                        },
                        SetTotales: function (credito) {
                            //CAPITAL TOTAL
                            if (credito.CapitalTotal == 0) {
                                credito.CapitalTotal = 0;
                                credito.CapitalTotal += parseFloat(credito.capitalVigenteVencido);
                                credito.CapitalTotal += parseFloat(credito.capitalPorVencer);
                                credito.CapitalTotal = parseFloat(credito.CapitalTotal.toFixed(2))
                            }

                            //GRACIA TOTAL
                            if (credito.GraciaTotal == 0) {
                                credito.GraciaTotal = 0;
                                if (credito.capitalPorVencer > 0) {
                                    credito.GraciaTotal += credito.ConPeriodoGracia ? parseFloat(credito.graciaVigenteVencido) : 0;
                                }
                                credito.GraciaTotal = parseFloat(credito.GraciaTotal.toFixed(2))
                            }

                            //INTERES TOTAL
                            if (credito.InteresTotal == 0) {
                                credito.InteresTotal = 0;
                                credito.InteresTotal += credito.CalcularDiariamente ? parseFloat(credito.Interes) : parseFloat(credito.interesVigenteVencido);
                                credito.InteresTotal = parseFloat(credito.InteresTotal.toFixed(2));
                            }

                        },
                        SetPrecioRecompra: function (credito) {
                            
                            this.SetTotales(credito);
                            //----------------------------------------------------------------------------------------------------------------------------------

                            this.SetPrecio(credito);
                        },
                        SetPrecio: function (credito) {
                            credito.precioRecompra = 0;
                            credito.precioRecompra = parseFloat(credito.CapitalTotal) + parseFloat(credito.GraciaTotal) + parseFloat(credito.InteresTotal);
                            credito.precioRecompra = parseFloat(credito.precioRecompra.toFixed(2));
                        },
                        formatMoney: function (num) {
                            return parseFloat(num).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        },
                        fecha: function (date) {
                            return moment(date).format("DD/MM/YYYY")
                        },
                        Estado: function (estado) {
                            switch (estado) {
                                case 1:
                                    return "Registrado";
                                case 2:
                                    return "Vigente";
                                case 3:
                                    return "Vencido";
                                case 4:
                                    return "Pagado";
                                case 6:
                                    return "Desistido";
                                case 16:
                                    return "Prejudicial";
                            }
                        },  
                        NEstadoCuota: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 1:
                                    return "Vigente";
                                case 2:
                                    return "Vencido";
                                case 3:
                                    return "Por Vencer";
                            }
                        },
                        NEstado: function (estadoCuota) {
                            switch (estadoCuota) {
                                case 0:
                                    return "Sin Pagar";
                                case 2:
                                    return "Pagada";
                            }
                        },
                        Moneda: function (moneda) {
                            switch (moneda) {
                                case 1:
                                    return "S/";
                                case 2:
                                    return "USD";
                            }
                        },
                        Filtrar: function () {
                            this.creditosFiltrados = this.creditos.filter(x => x.nSubProd == vm.p && x.fondeador == vm.f);
                        },
                        verCalculos: function (evento, credito) {
                            this.Calcular(credito);
                            this.credito = credito;

                            $('[data-toggle="tooltip"]').tooltip();
                        },
                        Buscar: function () {
                            this.query.split("\n").forEach(query => {
                                var search = new RegExp(query.trim().toUpperCase(), 'i');
                                var res = this.creditosFiltrados.find(x => search.test(x.codigoFondeador) || search.test(x.nombres) || search.test(x.id) || search.test(x.nCodCred.toString()));

                                if (res != undefined) {
                                    if(!this.encontrados.map(x=>x.codigoFondeador).includes(res.codigoFondeador))
                                        this.encontrados.push(res);
                                }
                            });
                            if (this.encontrados.length == 0) {
                                this.mensaje = "No se hallaron resultados";
                                $("#modalMensaje").modal("show");
                            }

                        },
                        DiferenciaDias: function (desde, hasta) {
                            let fecha1 = moment(desde)
                            let fecha2 = moment(hasta)
                            return fecha2.diff(fecha1, 'days');
                        },
                        Guardar: async function () {

                            let res = await fetch(this.api + "Recompras/Save",
                            {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    fondeadorID: vm.f,
                                    productoID: vm.p,
                                    fechaCalculo: this.fechaCalculo,
                                    creadoPor: JSON.parse(localStorage.getItem("usuario")).nombre,
                                    detalles: vm.creditos
                                        .filter(x => vm.checkedCreditos.includes(x.codigoFondeador))
                                        .map(e => {
                                            return {
                                                codigoFondeador: e.codigoFondeador,

                                                CapitalVigenteVencido: parseFloat(e.capitalVigenteVencido),
                                                GraciaVigenteVencido: parseFloat(e.graciaVigenteVencido),
                                                InteresVigenteVencido: parseFloat(e.interesVigenteVencido),
                                                CapitalPorVencer: parseFloat(e.capitalPorVencer),
                                                Tasa: parseFloat(e.nTasaComp),

                                                CapitalTotal: parseFloat(e.CapitalTotal),
                                                GraciaTotal: parseFloat(e.GraciaTotal),
                                                InteresTotal: parseFloat(e.InteresTotal),
                                                PrecioRecompra: parseFloat(e.precioRecompra)
                                            }
                                        })
                                })
                                
                                
                            });
                            window.location.href = '@(ViewBag.domain+"Recompras")';                            
                        }
                    },
                    computed: {
                        sumatoria: function () {
                            let creditos = this.creditos
                                .filter(c => this.checkedCreditos.includes(c.codigoFondeador))
                            
                            let res = creditos.length != 0 ? creditos.map(cr => cr.precioRecompra)
                                .reduce((a, b) => parseFloat(a) + parseFloat(b))
                                .toFixed(2) : "0.00"
                            
                            return this.formatMoney(res);
                        },
                        busquedaItems: function () {
                            return this.busqueda.split("\n").map(x => x.trim());
                        }
                    },
                    async mounted() {
                        this.api = $("#endpoint").val(); 

                        this.productos = await fetch(this.api + "Producto/All").then(x => x.json());
                        this.fondeadores = await fetch(this.api + "Fondeador/All").then(x => x.json());

                        var formData = new FormData();
                        formData.append('desde', (new Date()).toISOString());
                        formData.append('hasta', (new Date()).toISOString());

                        this.loaderCreditos = true;
                        let creditosRes = await fetch(this.api + "Creditos/CreditosFondeador", {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json());

                        creditosRes.forEach(credito => {
                            credito.DiferenciaDias = 0;
                            credito.Factor = 0;
                            credito.Interes = 0;
                            credito.precioRecompra = 0;
                            credito.CalcularDiariamente = credito.esReprogramado;
                            credito.ConPeriodoGracia = true;
                            if ((new Date(credito.fechaUltimoPago)).getFullYear() == 1)
                                credito.fechaUltimoPago = credito.fechaVenta;

                            credito.CapitalTotal = 0;
                            credito.GraciaTotal = 0;
                            credito.InteresTotal = 0;
                        });


                        this.creditos = creditosRes.filter(x => x.id != null && x.id != '');
                        this.Filtrar();

                        this.loaderCreditos = false;
                    }
                });

            </script>

        }
